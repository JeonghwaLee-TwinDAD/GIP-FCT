/**
  ******************************************************************************
  * @file    hi_g3lib_trace_modules.h
  * @author  AMG/IPC Application Team
  * @brief   Header file for the binary trace
  ******************************************************************************
  * @attention
  *
  * This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * Copyright (c) 2021 STMicroelectronics International N.V. 
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without 
  * modification, are permitted, provided that the following conditions are met:
  *
  * 1. Redistribution of source code must retain the above copyright notice, 
  *    this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright notice,
  *    this list of conditions and the following disclaimer in the documentation
  *    and/or other materials provided with the distribution.
  * 3. Neither the name of STMicroelectronics nor the names of other 
  *    contributors to this software may be used to endorse or promote products 
  *    derived from this software without specific written permission.
  * 4. This software, including modifications and/or derivative works of this 
  *    software, must execute solely and exclusively on microcontroller or
  *    microprocessor devices manufactured by or for STMicroelectronics.
  * 5. Redistribution and use of this software other than as permitted under 
  *    this license is void and will automatically terminate your rights under 
  *    this license. 
  *
  * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */

#ifndef __HI_G3LIB_TRACE_MODULES_H__
#define __HI_G3LIB_TRACE_MODULES_H__

#include <stdint.h>

/** @addtogroup HI_DRIVER ST8500 HI DRIVER
  * @{
  */

/** @defgroup hif_g3lib_drv HIF G3LIB DRV
  * @{
  */

/******************************************************************************/
/* G3 Library trace Modules definitions                                       */
/******************************************************************************/

/** @defgroup hif_g3lib_drv_Constants HIF G3LIB DRV Constants
  * @brief G3LIB DRV Constants
  * @{
  */   


/* The G3 Library trace modules start from ID = 7 (the previous ones cannot be used to keep compatibility with legacy versions).
   The last ID has to be 23, as the starting from 24 are reserved for the framework */

#define G3_LIB_TRACE_PRIORITY_MASK ((uint32_t) 0x0000000F)  /**< @brief Mask used to handle trace priority */
#define G3_LIB_TRACE_MODULES_MASK  ((uint32_t) 0x003FFF80)  /**< @brief Mask used to handle modules enabling/disabling */

typedef enum {
  TRACE_MODULE_PHY_DATA = 7,
  TRACE_MODULE_PHY_DEBUG,
  TRACE_MODULE_PHY_INFO,
  TRACE_MODULE_RTEI_DEBUG,
  TRACE_MODULE_RTEI_INFO,
  TRACE_MODULE_MAC_DATA,
  TRACE_MODULE_MAC_DEBUG,
  TRACE_MODULE_MAC_INFO,
  TRACE_MODULE_ADP_DATA,
  TRACE_MODULE_ADP_DEBUG,
  TRACE_MODULE_ADP_INFO,
  TRACE_MODULE_BOOT_DEBUG,
  TRACE_MODULE_BOOT_INFO,
  TRACE_MODULE_G3LIB_INFO,
  TRACE_MODULE_RTEWDG_DEBUG,
} G3LIB_TraceModule_t;

/******************************************************************************/
/* G3 Library trace Priority definitions                                      */
/******************************************************************************/
typedef enum {
  TRACE_PRIO_INFO = 0,
  TRACE_PRIO_WARN,
  TRACE_PRIO_FAIL,
  TRACE_PRIO_MISC,
} G3LIB_TracePrio_t;

/******************************************************************************/
/* G3 Library trace Type definitions                                      */
/******************************************************************************/
typedef enum {
  TRACE_TYPE_WAYPOINT = 0,
  TRACE_TYPE_BYTE,
  TRACE_TYPE_SHORT,
  TRACE_TYPE_BUFFER,
} G3LIB_TraceType_t;

/******************************************************************************/
/* G3 Library trace IDs definitions                                           */
/******************************************************************************/

typedef enum {
  // place logs for 16-bit short data from id=0
  // place other logs from id=64
  TRACE_PHYDATA_PDDATA_REQ = 64,
  TRACE_PHYDATA_PDDATA_IND,
  TRACE_PHYDATA_PDACK_REQ,
  TRACE_PHYDATA_PLMESETTRXSTATE_REQ,
  TRACE_PHYDATA_END
} tracePhyData_t;

typedef enum {
  // place logs for 16-bit short data from id=0
  // place other logs from id=64
  TRACE_PHYDEBUG_RSV0 = 64,
  TRACE_PHYDEBUG_RSV1,
  TRACE_PHYDEBUG_RSV2,
  TRACE_PHYDEBUG_TXPOWER_ATTEN,
  TRACE_PHYDEBUG_TXPOWER_WRONG_GAIN,
  TRACE_PHYDEBUG_TXPOWER_ATT,
  TRACE_PHYDEBUG_TXPOWER_MAXPOW,
  TRACE_PHYDEBUG_TXPOWER_TXPOW,
  TRACE_PHYDEBUG_EVAL_S_TOTALS,
  TRACE_PHYDEBUG_EVAL_S_TXPOWERDIFF,
  TRACE_PHYDEBUG_EVAL_S_PREDRIVERGAIN,
  TRACE_PHYDEBUG_EVAL_S_LOGCARRIER,
  TRACE_PHYDEBUG_END
} tracePhyDebug_t;

typedef enum {
  // place logs for 16-bit short data from id=0
  // place other logs from id=64
  TRACE_PHYINFO_PDDATA_REQ = 64,
  TRACE_PHYINFO_PDDATA_CONF,
  TRACE_PHYINFO_PDDATA_IND,
  TRACE_PHYINFO_PDACK_REQ,
  TRACE_PHYINFO_PDACK_CONF,
  TRACE_PHYINFO_PDACK_IND,
  TRACE_PHYINFO_PLMESET_REQ,
  TRACE_PHYINFO_PLMEGET_REQ,
  TRACE_PHYINFO_PLMESETTRXSTATE_REQ,
  TRACE_PHYINFO_PLMESETTRXSTATE_CONF,
  TRACE_PHYINFO_PLMECS_REQ,
  TRACE_PHYINFO_PLMECS_CONF,
  TRACE_PHYINFO_WRONG_SAP_PARAM,
  TRACE_PHYINFO_MEM_ALLOC_ERROR,
  TRACE_PHYINFO_QUEUE_FULL,
  TRACE_PHYINFO_END
} tracePhyInfo_t;

typedef enum {
  // place logs for 16-bit short data from id=0
  TRACE_RTEIDEBUG_RSV0 = 0,
  TRACE_RTEIDEBUG_IPC_HPRIO_WRONG_SIZE,
  TRACE_RTEIDEBUG_IPC_MSG_WRITE_WRONG_LEN,
  // place other logs from id=64
  TRACE_RTEIDEBUG_IPC_RTE_BLOCK_IDX = 64,
  TRACE_RTEIDEBUG_IPC_RTE_BLOCK_BUF,
  TRACE_RTEIDEBUG_IPC_PE_BLOCK_IDX,
  TRACE_RTEIDEBUG_IPC_PE_BLOCK_BUF,
  TRACE_RTEIDEBUG_IPC_NOTIF_LOST,
  TRACE_RTEIDEBUG_IPC_MAILBOX_FULL,
  TRACE_RTEIDEBUG_IPC_MSG_WRITE_IDX,
  TRACE_RTEIDEBUG_IPC_MSG_WRITE_BUFF,
  TRACE_RTEIDEBUG_IPC_HPRIO_BUSY,
  TRACE_RTEIDEBUG_IPC_HPRIO_WRITE_BUFF,
  TRACE_RTEIDEBUG_IPC_NO_MSG_TRACKED,
  TRACE_RTEIDEBUG_IPC_MSG_READ_IDX,
  TRACE_RTEIDEBUG_IPC_MSG_READ_BUFF,
  TRACE_RTEIDEBUG_IPC_EVT_QUEUE_FULL,
  TRACE_RTEIDEBUG_IPC_SYNC_NEXTRTE_BK,
  TRACE_RTEIDEBUG_IPC_SYNC_CLEARED_BKS,
  TRACE_RTEIDEBUG_END
} traceRteIfDebug_t;

typedef enum {
  // place logs for 16-bit short data from id=0
  // place other logs from id=64
  TRACE_RTEIINFO_RTEERRORIND_HPRIO = 64,
  TRACE_RTEIINFO_RTEERRORIND_LPRIO,
  TRACE_RTEIINFO_ERR_MACDATATXQUEUE_FULL,
  TRACE_RTEIINFO_ERR_MACDATARXQUEUE_FULL,
  TRACE_RTEIINFO_ERR_G3LIBSETQUEUE_FULL,
  TRACE_RTEIINFO_ERR_G3LIBGETQUEUE_FULL,
  TRACE_RTEIINFO_ERR_G3LIBSWRESETQUEUE_FULL,
  TRACE_RTEIINFO_ERR_G3LIBRTERECQUEUE_FULL,
  TRACE_RTEIINFO_ERR_MACRESETQUEUE_FULL,
  TRACE_RTEIINFO_ERR_PHYCSQUEUE_FULL,
  TRACE_RTEIINFO_ERR_PHYSETTRXSTATEQUEUE_FULL,
  TRACE_RTEIINFO_ERR_PHYDATATXQUEUE_FULL,
  TRACE_RTEIINFO_ERR_PHYACKTXQUEUE_FULL,
  TRACE_RTEIINFO_ERR_WRONG_CMDID,
  TRACE_RTEIINFO_ERR_READ_MSG,
  TRACE_RTEIINFO_ERR_GET_MSG,
  TRACE_RTEIINFO_ERR_WRITE_MSG,
  TRACE_RTEIINFO_RTE_EC,
  TRACE_RTEIINFO_RTE_DEBUG_INFO_CONF,
  TRACE_RTEIINFO_RTE_BAND_MISMATCH,
  TRACE_RTEIINFO_END
} traceRteIfInfo_t;

typedef enum {
  // place logs for 16-bit short data from id=0
  // place other logs from id=64
  TRACE_MACDATA_MCPSDATA_REQ = 64,
  TRACE_MACDATA_MCPSDATA_IND,
  TRACE_MACDATA_RTMACDATAREQ,
  TRACE_MACDATA_RTMACDATAIND,
  TRACE_MACDATA_MCPSDATAEXTADDR_IND,
  TRACE_MACDATA_END
} traceMacData_t;

typedef enum {
  // place logs for 16-bit short data from id=0
  TRACE_MACDEBUG_SRCSHORTADDR = 0,
  TRACE_MACDEBUG_DSTSHORTADDR,
  TRACE_MACDEBUG_SRCPANID,
  TRACE_MACDEBUG_DSTPANID,
  TRACE_MACDEBUG_TM_ITER_INFOBIT,
  TRACE_MACDEBUG_ACTIVECARRIERS,
  TRACE_MACDEBUG_NTABLE_CLEAR_ENTRY,
  TRACE_MACDEBUG_NTABLE_ADD_ENTRY,
  TRACE_MACDEBUG_NTABLE_UPDATE_ENTRY,
  TRACE_MACDEBUG_NTABLE_EXPIRETM_ENTRY,
  TRACE_MACDEBUG_NTABLE_LOWERINGMODULATION,
  TRACE_MACDEBUG_POSTABLE_ADDDEV,
  TRACE_MACDEBUG_NTABLE_TMVALIDTIME,
  TRACE_MACDEBUG_NTABLE_NOT_FOUND,
  TRACE_MACDEBUG_POSTABLE_EXPIRED,
  TRACE_MACDEBUG_NTABLE_TMTIME_EXP,
  TRACE_MACDEBUG_SEGM_SYMBOLS,
  TRACE_MACDEBUG_SEGM_BYTES,
  TRACE_MACDEBUG_SEGM_PAYLOAD_LEN,
  TRACE_MACDEBUG_SEGM_SEGMENT_SIZE,
  TRACE_MACDEBUG_SEGM_SEGMENT_PADDING,
  TRACE_MACDEBUG_SEGM_SEGSIZE_RS1,
  TRACE_MACDEBUG_SEGM_SEGSIZE_RS2,

  // place other logs from id=64
  TRACE_MACDEBUG_TM_ITER_MOD = 64,
  TRACE_MACDEBUG_TM_NUMCARRIERS,
  TRACE_MACDEBUG_TM_MINMODSNR,
  TRACE_MACDEBUG_TM_USEDEFAULT,
  TRACE_MACDEBUG_SRCEXTADDR,
  TRACE_MACDEBUG_DSTEXTADDR,
  TRACE_MACDEBUG_SNRCARRIERS,
  TRACE_MACDEBUG_FORCEMOD,
  TRACE_MACDEBUG_FORCEDIFF,
  TRACE_MACDEBUG_LQI,
  TRACE_MACDEBUG_MODSCH,
  TRACE_MACDEBUG_MOD,
  TRACE_MACDEBUG_TM0_7,
  TRACE_MACDEBUG_TM8_15,
  TRACE_MACDEBUG_TM16_23,
  TRACE_MACDEBUG_TXRES,
  TRACE_MACDEBUG_TXGAIN,
  TRACE_MACDEBUG_PHASEDIFF,
  TRACE_MACDEBUG_PHYTXPOWER,
  TRACE_MACDEBUG_PHYDT,
  TRACE_MACDEBUG_SECLEVEL,
  TRACE_MACDEBUG_KEYID,
  TRACE_MACDEBUG_ANTIREPLAYERROR,
  TRACE_MACDEBUG_DEVICETABLEERROR,
  TRACE_MACDEBUG_AUTHFAILED,
  TRACE_MACDEBUG_NTABLE_INV_MODE,
  TRACE_MACDEBUG_NTABLE_INV_BRD,
  TRACE_MACDEBUG_NTABLE_INVALID_TM,
  TRACE_MACDEBUG_NTABLE_GETPHYPARAMS,
  TRACE_MACDEBUG_FRAMEHANDLING_ERR,
  TRACE_MACDEBUG_REASSEMBLY_SC,
  TRACE_MACDEBUG_REASSEMBLY_FIRST,
  TRACE_MACDEBUG_REASSEMBLY_LAST,
  TRACE_MACDEBUG_REASSEMBLY_SCEXP,
  TRACE_MACDEBUG_REASSEMBLY_INTERMEDIATE,
  TRACE_MACDEBUG_CMDHANDLER_BCN_DISC,
  TRACE_MACDEBUG_CMDHANDLER_BCN_SEND,
  TRACE_MACDEBUG_CMDHANDLER_BCN_SCHD,
  TRACE_MACDEBUG_CMDHANDLER_BCNREQ,
  TRACE_MACDEBUG_CMDHANDLER_TMR,
  TRACE_MACDEBUG_SEGMENTATION_ERR,
  TRACE_MACDEBUG_SEGMENTATION_INFO,
  TRACE_MACDEBUG_SEGMENT_PDU,
  TRACE_MACDEBUG_SEGMENT_BCN,
  TRACE_MACDEBUG_SEGMENT_DATA,
  TRACE_MACDEBUG_SEGMENT_CMD,
  TRACE_MACDEBUG_SEGM_PILOT,
  TRACE_MACDEBUG_SEGM_RS_BKS,
  TRACE_MACDEBUG_SEGM_SC,
  TRACE_MACDEBUG_SEGM_DSN,
  TRACE_MACDEBUG_ENCRYPT_PDU,
  TRACE_MACDEBUG_QUEUEFULL,
  TRACE_MACDEBUG_CMDHANDLER_BCN_NOTREG,
  TRACE_MACDEBUG_END
} traceMacDebug_t;

typedef enum {
  TRACE_MACINFO_SRCSHORTADDR = 0,
  TRACE_MACINFO_DSTSHORTADDR,
  TRACE_MACINFO_SRCPANID,
  TRACE_MACINFO_DSTPANID,
  TRACE_MACINFO_LBAADDR,
  TRACE_MACINFO_RCCOORD,
  TRACE_MACINFO_MSDULEN,
  TRACE_MACINFO_MLMESTART_REQ,
  TRACE_MACINFO_DATATXTFSM_SETTMR,
  TRACE_MACINFO_DATATXTFSM_UNSETTMR,
  TRACE_MACINFO_INVALID_BCN_LEN,
  // place logs for 16-bit short data from id=0
  // place other logs from id=64
  TRACE_MACINFO_MCPSDATA_REQ = 64,
  TRACE_MACINFO_MCPSDATA_CONF,
  TRACE_MACINFO_MCPSDATA_IND,
  TRACE_MACINFO_MLMEBEACONNOTIFY_IND,
  TRACE_MACINFO_MLMECOMMSTATUS_IND,
  TRACE_MACINFO_MLMEGET_REQ,
  TRACE_MACINFO_MLMEGET_CONF,
  TRACE_MACINFO_MLMESET_REQ,
  TRACE_MACINFO_MLMESET_CONF,
  TRACE_MACINFO_MLMERESET_REQ,
  TRACE_MACINFO_MLMERESET_CONF,
  TRACE_MACINFO_MLMESCAN_REQ,
  TRACE_MACINFO_MLMESCAN_CONF,
  TRACE_MACINFO_SRCADDR_MODE,
  TRACE_MACINFO_DSTADDR_MODE,
  TRACE_MACINFO_SRCEXTADDR,
  TRACE_MACINFO_DSTEXTADDR,
  TRACE_MACINFO_MSDUHANDLE,
  TRACE_MACINFO_TXOPTIONS,
  TRACE_MACINFO_SECLEVEL,
  TRACE_MACINFO_KEYINDEX,
  TRACE_MACINFO_QOS,
  TRACE_MACINFO_LQI,
  TRACE_MACINFO_MEM_ALLOC_ERROR,
  TRACE_MACINFO_FRAMECOUNTER_BRD,
  TRACE_MACINFO_FRAMECOUNTER_PRV,
  TRACE_MACINFO_FRAMECOUNTER_RCV,
  TRACE_MACINFO_INVALID_MSDULEN,
  TRACE_MACINFO_QUEUEFULL,
  TRACE_MACINFO_INVALID_PARAMS,
  TRACE_MACINFO_NOTREG_IGNORE,
  TRACE_MACINFO_DATATXFSM_MODSCH,
  TRACE_MACINFO_DATATXFSM_MOD,
  TRACE_MACINFO_DATATXFSM_TM0_7,
  TRACE_MACINFO_DATATXFSM_TM8_15,
  TRACE_MACINFO_DATATXFSM_TM16_23,
  TRACE_MACINFO_DATATXFSM_PHYTXPOWER,
  TRACE_MACINFO_GENERICFSM_RESULT,
  TRACE_MACINFO_GENERICFSM_NULLHND_ST,
  TRACE_MACINFO_GENERICFSM_NULLHND_EV,
  TRACE_MACINFO_GENERICFSM_TIMER_EXP,
  TRACE_MACINFO_STARTFSM_MLMESETCBK,
  TRACE_MACINFO_STARTFSM_STATE,
  TRACE_MACINFO_STARTFSM_EVENT,
  TRACE_MACINFO_RESETFSM_STATE,
  TRACE_MACINFO_RESETFSM_EVENT,
  TRACE_MACINFO_DATATXFSM_CONFCALLER,
  TRACE_MACINFO_DATATXFSM_QUEUEDATA,
  TRACE_MACINFO_DATATXFSM_NEWTX,
  TRACE_MACINFO_RSV1,
  TRACE_MACINFO_RSV2,
  TRACE_MACINFO_RSV3,
  TRACE_MACINFO_RSV4,
  TRACE_MACINFO_RSV5,
  TRACE_MACINFO_RTMACDATACONF,
  TRACE_MACINFO_RTMACDATAREQ,
  TRACE_MACINFO_RTMACDATAIND,
  TRACE_MACINFO_RTMACRESET,
  TRACE_MACINFO_ERRKEY,
  TRACE_MACINFO_MCPSDATAEXTADDR_IND,
  TRACE_MACINFO_TMRTIMEREXPIRED,
  TRACE_MACINFO_END
} traceMacInfo_t;

typedef enum {
  // place logs for 16-bit short data from id=0
  // place other logs from id=64
  TRACE_ADPDATA_ADPDDATA_REQ = 64,
  TRACE_ADPDATA_ADPDRODATA_REQ,
  TRACE_ADPDATA_ADPDDATA_IND,
  TRACE_ADPDATA_ADPMLBP_REQ,
  TRACE_ADPDATA_ADPMLBP_IND,
  TRACE_ADPDATA_END
} traceAdpData_t;

typedef enum {
  // place logs for 16-bit short data from id=0
  TRACE_ADPDEBUG_LBP_WRONGLEN = 0,
  TRACE_ADPDEBUG_EAP_WRONGLEN,
  TRACE_ADPDEBUG_LBP_LBS_ADDR,
  TRACE_ADPDEBUG_LBP_PARAMS_SHORTADDR,
  TRACE_ADPDEBUG_SRCSHORTADDR,
  TRACE_ADPDEBUG_DSTSHORTADDR,
  TRACE_ADPDEBUG_ORIGSHORTADDR,
  TRACE_ADPDEBUG_NEXTHOP,
  TRACE_ADPDEBUG_VALIDTIME,
  TRACE_ADPDEBUG_RCOST,
  TRACE_ADPDEBUG_RCCOORD,
  TRACE_ADPDEBUG_SEQNUM,
  TRACE_ADPDEBUG_LINKCOST_FW,
  TRACE_ADPDEBUG_LINKCOST_REV,
  TRACE_ADPDEBUG_LINKCOST_FINAL,
  TRACE_ADPDEBUG_LOADNG_BLKLISTADDR,
  TRACE_ADPDEBUG_LOADNG_FWNEXTHOP,
  TRACE_ADPDEBUG_LOADNG_FWTIME,
  TRACE_ADPDEBUG_FRAG_OFFSET,
  TRACE_ADPDEBUG_FRAG_BYTESTOCOPY,
  TRACE_ADPDEBUG_FRAG_LEN,
  TRACE_ADPDEBUG_FRAG_REMAININGLEN,
  TRACE_ADPDEBUG_DSTADDRSET_FOUND,
  TRACE_ADPDEBUG_BRDSRCSHORTADDR,
  TRACE_ADPDEBUG_FRAG_TAG,
  TRACE_ADPDEBUG_REMOVE_SHORTADDR,
  // place other logs from id=64
  TRACE_ADPDEBUG_MAC_ENUM = 64,
  TRACE_ADPDEBUG_LBP_PROCESSING,
  TRACE_ADPDEBUG_LBP_T,
  TRACE_ADPDEBUG_LBP_CODE,
  TRACE_ADPDEBUG_LBP_ALBD,
  TRACE_ADPDEBUG_LBP_FW,
  TRACE_ADPDEBUG_LBP_DROP,
  TRACE_ADPDEBUG_LBP_ACCEPTED,
  TRACE_ADPDEBUG_LBP_CHALLENGE,
  TRACE_ADPDEBUG_LBP_DECLINE,
  TRACE_ADPDEBUG_LBP_KICK,
  TRACE_ADPDEBUG_LBP_CONFIG_PARAMS,
  TRACE_ADPDEBUG_LBP_PARAMS_RESULT,
  TRACE_ADPDEBUG_LBP_PARAMS_GMK,
  TRACE_ADPDEBUG_LBP_PARAMS_ACTIVEID,
  TRACE_ADPDEBUG_LBP_PARAMS_REMOVEID,
  TRACE_ADPDEBUG_LBP_PARAMS_UNEXPECTED,
  TRACE_ADPDEBUG_LBP_SEND_CBK_STATUS,
  TRACE_ADPDEBUG_LBP_SEND_CBK_HANDLE,
  TRACE_ADPDEBUG_EAP_MSG1,
  TRACE_ADPDEBUG_EAP_MSG2,
  TRACE_ADPDEBUG_EAP_MSG3,
  TRACE_ADPDEBUG_EAP_MSG4,
  TRACE_ADPDEBUG_EAP_ACCEPTED,
  TRACE_ADPDEBUG_EAP_DISCARD,
  TRACE_ADPDEBUG_EAP_SUCCESS,
  TRACE_ADPDEBUG_EAP_FAILURE,
  TRACE_ADPDEBUG_EAP_RANDS_EXP,
  TRACE_ADPDEBUG_EAP_RANDS_RCV,
  TRACE_ADPDEBUG_EAP_MACP_EXP,
  TRACE_ADPDEBUG_EAP_MACP_RCV,
  TRACE_ADPDEBUG_EAP_MACS_EXP,
  TRACE_ADPDEBUG_EAP_MACS_RCV,
  TRACE_ADPDEBUG_EAP_NONCE,
  TRACE_ADPDEBUG_EAP_PCHANNEL,
  TRACE_ADPDEBUG_EAP_DECODE_ERR,
  TRACE_ADPDEBUG_HOPCOUNT,
  TRACE_ADPDEBUG_WEAKLINK,
  TRACE_ADPDEBUG_ISVALID,
  TRACE_ADPDEBUG_RTABLE_CLEAR,
  TRACE_ADPDEBUG_RTABLE_REFRESH,
  TRACE_ADPDEBUG_RTABLE_INSTALL,
  TRACE_ADPDEBUG_RTABLE_ERROR,
  TRACE_ADPDEBUG_RSET_ENTRY,
  TRACE_ADPDEBUG_RSET_UPDATE,
  TRACE_ADPDEBUG_BLIST_ADD,
  TRACE_ADPDEBUG_BRDSN,
  TRACE_ADPDEBUG_G3LINKCOST,
  TRACE_ADPDEBUG_CAPACITYLINKCOST,
  TRACE_ADPDEBUG_SECURITY_LEVEL,
  TRACE_ADPDEBUG_LOADNG_CHECKVAL,
  TRACE_ADPDEBUG_LOADNG_COMMONPROC,
  TRACE_ADPDEBUG_LOADNG_RREQPROC,
  TRACE_ADPDEBUG_LOADNG_RREPPROC,
  TRACE_ADPDEBUG_LOADNG_PREQPROC,
  TRACE_ADPDEBUG_LOADNG_PREPPROC,
  TRACE_ADPDEBUG_LOADNG_RERRPROC,
  TRACE_ADPDEBUG_LOADNG_RLCPROC,
  TRACE_ADPDEBUG_LOADNG_RREQ,
  TRACE_ADPDEBUG_LOADNG_RREP,
  TRACE_ADPDEBUG_LOADNG_PREQ,
  TRACE_ADPDEBUG_LOADNG_PREP,
  TRACE_ADPDEBUG_LOADNG_RERR,
  TRACE_ADPDEBUG_LOADNG_RLCREQ,
  TRACE_ADPDEBUG_LOADNG_RLCREP,
  TRACE_ADPDEBUG_LOADNG_DESTREACHED,
  TRACE_ADPDEBUG_LOADNG_INVALID,
  TRACE_ADPDEBUG_FRAG_FRAG1,
  TRACE_ADPDEBUG_FRAG_FRAGN,
  TRACE_ADPDEBUG_FRAG_WRONGTAG,
  TRACE_ADPDEBUG_FRAGBUFFER_ALLOCATED,
  TRACE_ADPDEBUG_FRAG_IGNORE,
  TRACE_ADPDEBUG_FRAG_INPROGRESS,
  TRACE_ADPDEBUG_FRAG_COMPLETED,
  TRACE_ADPDEBUG_INVOKE_CALLBACK,
  TRACE_ADPDEBUG_DECOMPRESSION_ERR,
  TRACE_ADPDEBUG_PROTONOTSUPPORTED,
  TRACE_ADPDEBUG_CAPACITYFWLINKCOST,
  TRACE_ADPDEBUG_G3FWLINKCOST,
  TRACE_ADPDEBUG_FRAGBUFFER_FOUND,
  TRACE_ADPDEBUG_FRAGBUFFER_NOTFOUND,
  TRACE_ADPDEBUG_RXNOTCOMPR,
  TRACE_ADPDEBUG_RXHC,
  TRACE_ADPDEBUG_RXNALP,
  TRACE_ADPDEBUG_HOPSLEFTZERO,
  TRACE_ADPDEBUG_HOPSLEFTINVALID,
  TRACE_ADPDEBUG_WRONGHANDLE,
  TRACE_ADPDEBUG_EXPECTEDHANDLE,
  TRACE_ADPDEBUG_FRAGBUFFER_RECYCLE,
  TRACE_ADPDEBUG_NODETABLE_MODE,
  TRACE_ADPDEBUG_MESHHEADER_ERR,
  TRACE_ADPDEBUG_METRICTYPE,
  TRACE_ADPDEBUG_FRAGOVERLAP,
  TRACE_ADPDEBUG_END
} traceAdpDebug_t;

typedef enum {
  // place logs for 16-bit short data from id=0
  TRACE_ADPINFO_NSDULEN = 0,
  TRACE_ADPINFO_SRCSHORTADDR,
  TRACE_ADPINFO_DSTSHORTADDR,
  TRACE_ADPINFO_ORIGSHORTADDR,
  TRACE_ADPINFO_NEXTHOPSHORTADDR,
  TRACE_ADPINFO_SRCPANID,
  TRACE_ADPINFO_DSTPANID,
  TRACE_ADPINFO_RREQ_FWTIME,
  TRACE_ADPINFO_RREP_RCV,
  TRACE_ADPINFO_RREQ_RCV,
  TRACE_ADPINFO_ROUTECOST,
  TRACE_ADPINFO_INVALID_LBAADDR,
  TRACE_ADPINFO_BOOTFSM_SHORTADDR,
  TRACE_ADPINFO_BOOTFSM_PANID,
  TRACE_ADPINFO_RSV1,
  TRACE_ADPINFO_UNREACHSHORTADDR,
  TRACE_ADPINFO_FRAGTAG,
  TRACE_ADPINFO_LINKCOST,
  TRACE_ADPINFO_FINALDSTSHORTADDR,
  TRACE_ADPINFO_SENDINMS,
  // place other logs from id=64
  TRACE_ADPINFO_ADPDDATA_REQ = 64,
  TRACE_ADPINFO_ADPDDATA_CONF,
  TRACE_ADPINFO_ADPDDATA_IND,
  TRACE_ADPINFO_ADPDRODATA_REQ,
  TRACE_ADPINFO_ADPMROUTEDISCOVERY_REQ,
  TRACE_ADPINFO_ADPMROUTEDISCOVERY_CONF,
  TRACE_ADPINFO_ADPMPATHDISCOVERY_REQ,
  TRACE_ADPINFO_ADPMPATHDISCOVERY_CONF,
  TRACE_ADPINFO_ADPMGET_REQ,
  TRACE_ADPINFO_ADPMGET_CONF,
  TRACE_ADPINFO_ADPMSET_REQ,
  TRACE_ADPINFO_ADPMSET_CONF,
  TRACE_ADPINFO_ADPMNETJOIN_REQ,
  TRACE_ADPINFO_ADPMNETJOIN_CONF,
  TRACE_ADPINFO_ADPMNETLEAVE_REQ,
  TRACE_ADPINFO_ADPMNETLEAVE_CONF,
  TRACE_ADPINFO_ADPMNETLEAVE_IND,
  TRACE_ADPINFO_ADPMNETSTART_REQ,
  TRACE_ADPINFO_ADPMNETSTART_CONF,
  TRACE_ADPINFO_ADPMNETSTATUS_IND,
  TRACE_ADPINFO_ADPMDISCOVERY_REQ,
  TRACE_ADPINFO_ADPMDISCOVERY_CONF,
  TRACE_ADPINFO_ADPMLBP_REQ,
  TRACE_ADPINFO_ADPMLBP_CONF,
  TRACE_ADPINFO_ADPMLBP_IND,
  TRACE_ADPINFO_ADPMRESET_REQ,
  TRACE_ADPINFO_ADPMRESET_CONF,
  TRACE_ADPINFO_NSDUHANDLE,
  TRACE_ADPINFO_DISCROUTE,
  TRACE_ADPINFO_MCPSCONFSTATUS,
  TRACE_ADPINFO_QOS,
  TRACE_ADPINFO_LQI,
  TRACE_ADPINFO_ACKREQ,
  TRACE_ADPINFO_SRCADDR_MODE,
  TRACE_ADPINFO_DSTADDR_MODE,
  TRACE_ADPINFO_SRCEXTADDR,
  TRACE_ADPINFO_DSTEXTADDR,
  TRACE_ADPINFO_NEXTHOPEXT,
  TRACE_ADPINFO_MEM_ALLOC_ERROR,
  TRACE_ADPINFO_INVALID_NSDULEN,
  TRACE_ADPINFO_INVALID_REQUEST,
  TRACE_ADPINFO_INVALID_PARAMS,
  TRACE_ADPINFO_INVALID_EAPID,
  TRACE_ADPINFO_QUEUEFULL,
  TRACE_ADPINFO_DISPATCH_ORDER,
  TRACE_ADPINFO_RETRIES,
  TRACE_ADPINFO_TIMEOUT_EXPIRED,
  TRACE_ADPINFO_NOTASSOCIATED,
  TRACE_ADPINFO_ALREADYJOINED,
  TRACE_ADPINFO_GENERIC_ERROR,
  TRACE_ADPINFO_IPV6DESTADDR,
  TRACE_ADPINFO_INVALIDDEVICETYPE,
  TRACE_ADPINFO_ADDRMULTICAST,
  TRACE_ADPINFO_ADDRGLOBALUNICAST,
  TRACE_ADPINFO_ADDRLINKLOCAL,
  TRACE_ADPINFO_RESET_ERR,
  TRACE_ADPINFO_ROUTEOVER,
  TRACE_ADPINFO_BRDFWDISABLED,
  TRACE_ADPINFO_DISCARD,
  TRACE_ADPINFO_LOADNG,
  TRACE_ADPINFO_LBP,
  TRACE_ADPINFO_GENERICFSM_NULLHND_ST,
  TRACE_ADPINFO_GENERICFSM_NULLHND_EV,
  TRACE_ADPINFO_GENERICFSM_NULLHND_IDX,
  TRACE_ADPINFO_GENERICFSM_ELEMNOTFOUND,
  TRACE_ADPINFO_ROUTERLCFSM_STATE,
  TRACE_ADPINFO_ROUTERLCFSM_EVENT,
  TRACE_ADPINFO_ROUTEREQUEST_WAITRREP,
  TRACE_ADPINFO_NONEXTHOPFORPREP,
  TRACE_ADPINFO_ROUTEREQUESTTXCONF_STATUS,
  TRACE_ADPINFO_ROUTEREQUESTFSM_RETRIES,
  TRACE_ADPINFO_RREPFSM_NOFREEELEMS,
  TRACE_ADPINFO_RREPFSM_IDX,
  TRACE_ADPINFO_RESETFSM_STATE,
  TRACE_ADPINFO_RESETFSM_EVENT,
  TRACE_ADPINFO_PATHREQUESTFSM_STATE,
  TRACE_ADPINFO_PATHREQUESTFSM_EVENT,
  TRACE_ADPINFO_PATHREPLYFSM_STATE,
  TRACE_ADPINFO_PATHREPLYFSM_EVENT,
  TRACE_ADPINFO_NETSTARTFSM_STATE,
  TRACE_ADPINFO_NETSTARTFSM_EVENT,
  TRACE_ADPINFO_KICKFSM_STATE,
  TRACE_ADPINFO_KICKFSM_EVENT,
  TRACE_ADPINFO_DISCOVERYFSM_STATE,
  TRACE_ADPINFO_DISCOVERYFSM_EVENT,
  TRACE_ADPINFO_DISCOVERYFSM_BCNS,
  TRACE_ADPINFO_DISCOVERYFSM_IGNOREBCN,
  TRACE_ADPINFO_UNIFAILED_BROADRREQ,
  TRACE_ADPINFO_ATTACHCBKTORREQ,
  TRACE_ADPINFO_PANCEXTPACKETERR,
  TRACE_ADPINFO_DATATXFSM_ROUTEDISC_FAIL,
  TRACE_ADPINFO_DATATXFSM_TXCOMPLETED,
  TRACE_ADPINFO_DATATXFSM_TXFAILED,
  TRACE_ADPINFO_DATATXFSM_NEXTSEGM,
  TRACE_ADPINFO_DATATXFSM_ROUTEDISC,
  TRACE_ADPINFO_DATATXFSM_ROUTEREPAIR,
  TRACE_ADPINFO_DATATXFSM_TXFAILEDCHBUSY,
  TRACE_ADPINFO_DATARXFSM_UNICAST_EXTADDR,
  TRACE_ADPINFO_DATARXFSM_BRD,
  TRACE_ADPINFO_DATARXFSM_UNICAST,
  TRACE_ADPINFO_DATAFWFSM_WAITROUTECONFIRM,
  TRACE_ADPINFO_DATAFWFSM_TYPE,
  TRACE_ADPINFO_DATAFWFSM_WAITCONFIRM,
  TRACE_ADPINFO_DATAFWFSM_LOADNG,
  TRACE_ADPINFO_DATAFWFSM_RREP,
  TRACE_ADPINFO_DATAFWFSM_UNICAST,
  TRACE_ADPINFO_DATAFWFSM_BRD,
  TRACE_ADPINFO_DATAFWFSM_NEWROUTE,
  TRACE_ADPINFO_DATAFWFSM_PREQFWFAIL,
  TRACE_ADPINFO_DATAFWFSM_SENDRERR,
  TRACE_ADPINFO_DATAFWFSM_CANTFWPKT,
  TRACE_ADPINFO_CMDTXFSM_STATE,
  TRACE_ADPINFO_CMDTXFSM_EVENT,
  TRACE_ADPINFO_CMDTXFSM_IDX,
  TRACE_ADPINFO_CMDTXFSM_ROUTEDISC,
  TRACE_ADPINFO_CMDTXFSM_ROUTEREPAIR,
  TRACE_ADPINFO_CMDTXFSM_FRAGNOTSUPPORTED,
  TRACE_ADPINFO_CMDTXFSM_ROUTEERROR,
  TRACE_ADPINFO_RREQ_FWD,
  TRACE_ADPINFO_RREQ_NOFWD,
  TRACE_ADPINFO_BOOTFSM_RANDP,
  TRACE_ADPINFO_BOOTFSM_IDP,
  TRACE_ADPINFO_BOOTFSM_IDS,
  TRACE_ADPINFO_LOADNGUNICASTFW,
  TRACE_ADPINFO_OK,
  TRACE_ADPINFO_DELETEROUTE_REQ,
  TRACE_ADPINFO_GENERATE_RERR,
  TRACE_ADPINFO_DATAFWFSM_RREQ_UNICAST,
  TRACE_ADPINFO_BOOTFSM_INIT,
  TRACE_ADPINFO_BRDFWDISCARDED,
  TRACE_ADPINFO_BRDFWPRFWD,
  TRACE_ADPINFO_BRDFWRND,
  TRACE_ADPINFO_DISCARDBRDDUPLICATED,
  TRACE_ADPINFO_CMDTXFSM_TXFAILEDCHBUSY,
  TRACE_ADPINFO_DATAFWFSM_TXFAILEDCHBUSY,
  TRACE_ADPINFO_RETXAFTERBUSY,
  TRACE_ADPINFO_RREPFSM_OVERRIDERREQ,
  TRACE_ADPINFO_RREPFSM_ROUTEERR,  
  TRACE_ADPINFO_RREPFSM_WAITSEC,
  TRACE_ADPINFO_RREPFSM_RREQPROCESSEND,
  TRACE_ADPINFO_RREPFSM_GENTIMEREVT,
  TRACE_ADPINFO_END
} traceAdpInfo_t;

typedef enum {
  // place logs for 16-bit short data from id=0
  TRACE_BOOTDEBUG_SRCSHORTADDR = 0,
  TRACE_BOOTDEBUG_LBP_WRONGLEN,
  TRACE_BOOTDEBUG_EAP_WRONGLEN,
  TRACE_BOOTDEBUG_WRONG_LBAADDRESS,
  TRACE_BOOTDEBUG_ADDR_ASSIGN,
  TRACE_BOOTDEBUG_DEVICE_SORTTIMEOUT,
  TRACE_BOOTDEBUG_SERVER_GETPSKTIMEOUT,
  // place other logs from id=64
  TRACE_BOOTDEBUG_LBP = 64,
  TRACE_BOOTDEBUG_SRCEXTADDR,
  TRACE_BOOTDEBUG_DISCARD,
  TRACE_BOOTDEBUG_LBP_WRONGT,
  TRACE_BOOTDEBUG_LBP_WRONGCODE,
  TRACE_BOOTDEBUG_EAP_WRONGT,
  TRACE_BOOTDEBUG_EAP_WRONGCODE,
  TRACE_BOOTDEBUG_JOINENTRY_FOUND,
  TRACE_BOOTDEBUG_JOINENTRY_NOTFOUND,
  TRACE_BOOTDEBUG_JOINTABLE_FULL,
  TRACE_BOOTDEBUG_DEVICEEXTADDR,
  TRACE_BOOTDEBUG_DEVICESTATE,
  TRACE_BOOTDEBUG_DEVICEEVENT,
  TRACE_BOOTDEBUG_DEVICESTATE_NULLHANDL,
  TRACE_BOOTDEBUG_DEVICEEVENT_NULLHANDL,
  TRACE_BOOTDEBUG_SEND_LBP_DECLINE,
  TRACE_BOOTDEBUG_RCV_LBP_JOINING,
  TRACE_BOOTDEBUG_RCV_EAP_MSG2,
  TRACE_BOOTDEBUG_RCV_EAP_MSG4,
  TRACE_BOOTDEBUG_EAP_AUTHERR,
  TRACE_BOOTDEBUG_EAP_EAPIDERR,
  TRACE_BOOTDEBUG_EAP_PCHANNELERR,
  TRACE_BOOTDEBUG_INTERNALSERVERERR,
  TRACE_BOOTDEBUG_DEVICEBLACKLISTED,
  TRACE_BOOTDEBUG_ADPMLBPCONFSTATUS,
  TRACE_BOOTDEBUG_TIMEDEVTERR,
} traceBootDebug_t;

typedef enum {
  // place logs for 16-bit short data from id=0
  TRACE_BOOTINFO_WAITSECONDS = 0,
  TRACE_BOOTINFO_DEVICEFSM_JOINLBA,
  TRACE_BOOTINFO_DEVICEFSM_JOINPANID,
  TRACE_BOOTINFO_SERVERFSM_SAMEPANIDFOUND,
  TRACE_BOOTINFO_BOOTSERVERJOINING2,
  // place other logs from id=64
  TRACE_BOOTINFO_BOOTSERVERSTART_REQ = 64,
  TRACE_BOOTINFO_BOOTSERVERSTART_CONF,
  TRACE_BOOTINFO_BOOTSERVERSTOP_REQ,
  TRACE_BOOTINFO_BOOTSERVERSTOP_CONF,
  TRACE_BOOTINFO_BOOTSERVERKICK_REQ,
  TRACE_BOOTINFO_BOOTSERVERKICK_CONF,
  TRACE_BOOTINFO_BOOTSERVERLEAVE_IND,
  TRACE_BOOTINFO_BOOTSERVERJOIN_IND,
  TRACE_BOOTINFO_BOOTDEVICESTART_REQ,
  TRACE_BOOTINFO_BOOTDEVICESTART_CONF,
  TRACE_BOOTINFO_BOOTDEVICELEAVE_REQ,
  TRACE_BOOTINFO_BOOTDEVICELEAVE_CONF,
  TRACE_BOOTINFO_BOOTDEVICELEAVE_IND,
  TRACE_BOOTINFO_BOOTGET_REQ,
  TRACE_BOOTINFO_BOOTGET_CONF,
  TRACE_BOOTINFO_BOOTSET_REQ,
  TRACE_BOOTINFO_BOOTSET_CONF,
  TRACE_BOOTINFO_MEM_ALLOC_ERROR,
  TRACE_BOOTINFO_DEVICENOTCONNECTED,
  TRACE_BOOTINFO_GENERICFSM_NULLHND_ST,
  TRACE_BOOTINFO_GENERICFSM_NULLHND_EV,
  TRACE_BOOTINFO_DEVICEFSM_RSV1,
  TRACE_BOOTINFO_DEVICEFSM_RSV2,
  TRACE_BOOTINFO_DEVICEFSM_JOINNEXTLBA,
  TRACE_BOOTINFO_DEVICEFSM_SLEEP,
  TRACE_BOOTINFO_DEVICEFSM_FASTRESTORE,
  TRACE_BOOTINFO_SERVERFSM_STATE,
  TRACE_BOOTINFO_SERVERFSM_EVENT,
  TRACE_BOOTINFO_SERVERFSM_FASTRESTORE,
  TRACE_BOOTINFO_SERVERFSM_OTHERPANIDFOUND,
  TRACE_BOOTINFO_BOOTSERVERJOINING1,
  TRACE_BOOTINFO_BOOTSERVERJOINING3,
  TRACE_BOOTINFO_DEVICEFSM_JOINSAMELBA,
  TRACE_BOOTINFO_BOOTDEVICEPANSORT_IND,
  TRACE_BOOTINFO_BOOTDEVICEPANSORT_REQ,
  TRACE_BOOTINFO_BOOTDEVICEPANSORT_CONF,
  TRACE_BOOTINFO_BOOTSERVERGETPSK_IND,
  TRACE_BOOTINFO_BOOTSERVERSETPSK_REQ,
  TRACE_BOOTINFO_BOOTSERVERSETPSK_CONF,
} traceBootInfo_t;

typedef enum {
  // place logs for 16-bit short data from id=0
  TRACE_G3LIBINFO_LOADNGSEQNUM = 0,
  TRACE_G3LIBINFO_MEMPOOLALLOCATIONFAIL,
  TRACE_G3LIBINFO_ATTRVALUE_16BIT,
  TRACE_G3LIBINFO_ATTRINDEX,
  // place other logs from id=64
  TRACE_G3LIBINFO_G3LIBSWRESET_REQ = 64,
  TRACE_G3LIBINFO_G3LIBSWRESET_CONF,
  TRACE_G3LIBINFO_G3LIBTESTMODE_REQ,
  TRACE_G3LIBINFO_G3LIBTESTMODE_CONF,
  TRACE_G3LIBINFO_G3LIBSET_REQ,
  TRACE_G3LIBINFO_G3LIBSET_CONF,
  TRACE_G3LIBINFO_G3LIBGET_REQ,
  TRACE_G3LIBINFO_G3LIBGET_CONF,
  TRACE_G3LIBINFO_PEVERSION,
  TRACE_G3LIBINFO_PROTVERSION,
  TRACE_G3LIBINFO_DEVICETYPE,
  TRACE_G3LIBINFO_QUEUEFULL,
  TRACE_G3LIBINFO_INVALIDATTRID,
  TRACE_G3LIBINFO_ROATTRIBUTE,
  TRACE_G3LIBINFO_ATTRIBUTEPE,
  TRACE_G3LIBINFO_ATTRIBUTERTE,
  TRACE_G3LIBINFO_ATTRIBUTERTE_PHY,
  TRACE_G3LIBINFO_ATTRIBUTERTE_MAC,
  TRACE_G3LIBINFO_ATTRIBUTERTE_RT,
  TRACE_G3LIBINFO_CHANGERTEMODE,
  TRACE_G3LIBINFO_TIMEREXPIRED,
  TRACE_G3LIBINFO_ATTRID,
  TRACE_G3LIBINFO_ATTRVALUE,
  TRACE_G3LIBINFO_MACFRAMECOUNTER,
  TRACE_G3LIBINFO_RTMACRESET_RESULT,
  TRACE_G3LIBINFO_RTERECOVERY_RESULT,
  TRACE_G3LIBINFO_RTEERR_CATEGORY,
  TRACE_G3LIBINFO_RTEERR_SEVERITY,
  TRACE_G3LIBINFO_RTEERR_DATA,
  TRACE_G3LIBINFO_RTEERR_RTMACRESET,
  TRACE_G3LIBINFO_RTEERR_IPCFLUSH,
  TRACE_G3LIBINFO_RTEERR_UNLOCKREG,
  TRACE_G3LIBINFO_RTEERR_FSMERR_STATE,
  TRACE_G3LIBINFO_RTEERR_FSMERR_EVENT,
  TRACE_G3LIBINFO_RTEERR_ASKDEBUGINFO,
  TRACE_G3LIBINFO_RTEREC_FSMTIMEOUT,
  TRACE_G3LIBINFO_WOATTRIBUTE,
  TRACE_G3LIBINFO_RTE_INIT_FAILED,
  TRACE_G3LIBINFO_BAND_INIT_FAILED,
  TRACE_G3LIBINFO_RSV1,
  TRACE_G3LIBINFO_HW_INIT,
  TRACE_G3LIBINFO_SW_INIT,
  TRACE_G3LIBINFO_BAND_CEN_A,
  TRACE_G3LIBINFO_BAND_CEN_B,
  TRACE_G3LIBINFO_BAND_ARIB,
  TRACE_G3LIBINFO_BAND_FCC,
  TRACE_G3LIBINFO_BAND_1901_2,
  TRACE_G3LIBINFO_DEVICE,
  TRACE_G3LIBINFO_COORD,
  TRACE_G3LIBINFO_UPDATE1MIN,
  TRACE_G3LIBINFO_UPDATE15S,
  TRACE_G3LIBINFO_UPDATE4S,
  TRACE_G3LIBINFO_RTETIMEOUT,
  TRACE_G3LIBINFO_TIMEDEVENTERR,
  TRACE_G3LIBINFO_MEMPOOLFULL,
  TRACE_G3LIBINFO_MEMPOOLALLOCATIONZERO,
  TRACE_G3LIBINFO_MEMPOOLALLOCATIONBIG,
  TRACE_G3LIBINFO_MEMPOOLDEALLOCZERO,
  TRACE_G3LIBINFO_RTE_EC,
  TRACE_G3LIBINFO_RTE_BAND,
  TRACE_G3LIBINFO_RTEMESET_REQ,
  TRACE_G3LIBINFO_RTEMACRESET_REQ,
  TRACE_G3LIBINFO_RTERECOVERY_REQ,
  TRACE_G3LIBINFO_RTEBANDSELECT_REQ,
  TRACE_G3LIBINFO_SWRESET_FSMERR_STATE,
  TRACE_G3LIBINFO_SWRESET_FSMERR_EVENT,  
} traceG3LibInfo_t;

typedef enum {
  // place logs for 16-bit short data from id=0
  // place other logs from id=64
  TRACE_RTEWDGDEBUG_POLL_RTE = 64,
  TRACE_RTEWDGDEBUG_POLLING_OK,
  TRACE_RTEWDGDEBUG_POLLING_NOK,
  TRACE_RTEWDGDEBUG_IPC_MSG_WRITE_IDX,
  TRACE_RTEWDGDEBUG_IPC_MSG_WRITE_BUFF,
  TRACE_RTEWDGDEBUG_IPC_MSG_READ_IDX,
  TRACE_RTEWDGDEBUG_IPC_MSG_READ_BUFF,
} traceRTEWdgDebug_t;

/**
  * @}
  */

/**
  * @}
  */

/**
  * @}
  */

#endif // __HI_G3LIB_TRACE_MODULES_H__

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
